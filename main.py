from fastapi import FastAPI, Request, HTTPException, Query
import os
import uvicorn
import google.generativeai as generative_ai
from typing import Optional
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError




app = FastAPI(title="Gemini Question Answering API")
slack_token =  os.environ.get("SLACK_BOT_TOKEN")
generative_ai.configure(api_key=os.environ.get("CHAT_BOT_TOKEN")) 
channel = os.environ.get("CHANNEL")



@app.get("/answer")
async def get_answer(question: str = Query(..., description="The question to ask Gemini"),
                     model: Optional[str] = Query(None, description="The Gemini model to use (e.g., 'gemini-pro'). If None, the default model will be used."),
                     temperature: Optional[float] = Query(0.0, description="The temperature for response generation."),
                     max_output_tokens: Optional[int] = Query(512, description="Maximum number of tokens in the generated response."),
                     top_p: Optional[float] = Query(None, description="Nucleus sampling parameter."),
                     top_k: Optional[int] = Query(None, description="Top-k sampling parameter.")):
    """Answers a question using the Gemini API."""

    try:
        if model is None:
            model = "gemini-2.0-flash-001" 
        gemini_model = generative_ai.GenerativeModel(model)
        generation_config = {
            "temperature": temperature,
            "max_output_tokens": max_output_tokens,
        }
        if top_p is not None:
            generation_config["top_p"] = top_p
        if top_k is not None:
            generation_config["top_k"] = top_k

        response = gemini_model.generate_content(
            contents=[question]
            
        )
        print(response)
        if response.candidates:
            
            answer = response.candidates[0].content.parts[0].text
            client = WebClient(token=slack_token)
            response = client.chat_postMessage(
                channel=channel,
                text=answer
                )
            return {"answer": answer}
           
        else:
            raise HTTPException(status_code=500, detail="No answer generated by Gemini.")

    except Exception as e:
        print(f"Error: {e}")
        raise HTTPException(status_code=500, detail=f"An error occurred: {e}")


if __name__ == '__main__':
    uvicorn.run(app, port=80, host='0.0.0.0')